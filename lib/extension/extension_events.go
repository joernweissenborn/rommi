
/*
 * generated by event_generator
 *
 * DO NOT EDIT
 */

package extension

import "github.com/joernweissenborn/eventual2go"



type ExtensionCompleter struct {
	*eventual2go.Completer
}

func NewExtensionCompleter() *ExtensionCompleter {
	return &ExtensionCompleter{eventual2go.NewCompleter()}
}

func (c *ExtensionCompleter) Complete(d Extension) {
	c.Completer.Complete(d)
}

func (c *ExtensionCompleter) Future() *ExtensionFuture {
	return &ExtensionFuture{c.Completer.Future()}
}

type ExtensionFuture struct {
	*eventual2go.Future
}

func (f *ExtensionFuture) Result() Extension {
	return f.Future.Result().(Extension)
}

type ExtensionCompletionHandler func(Extension) Extension

func (ch ExtensionCompletionHandler) toCompletionHandler() eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		return ch(d.(Extension))
	}
}

func (f *ExtensionFuture) Then(ch ExtensionCompletionHandler) *ExtensionFuture {
	return &ExtensionFuture{f.Future.Then(ch.toCompletionHandler())}
}

func (f *ExtensionFuture) AsChan() chan Extension {
	c := make(chan Extension, 1)
	cmpl := func(d chan Extension) ExtensionCompletionHandler {
		return func(e Extension) Extension {
			d <- e
			close(d)
			return e
		}
	}
	ecmpl := func(d chan Extension) eventual2go.ErrorHandler {
		return func(error) (eventual2go.Data, error) {
			close(d)
			return nil, nil
		}
	}
	f.Then(cmpl(c))
	f.Err(ecmpl(c))
	return c
}

type ExtensionStreamController struct {
	*eventual2go.StreamController
}

func NewExtensionStreamController() *ExtensionStreamController {
	return &ExtensionStreamController{eventual2go.NewStreamController()}
}

func (sc *ExtensionStreamController) Add(d Extension) {
	sc.StreamController.Add(d)
}

func (sc *ExtensionStreamController) Join(s *ExtensionStream) {
	sc.StreamController.Join(s.Stream)
}

func (sc *ExtensionStreamController) JoinFuture(f *ExtensionFuture) {
	sc.StreamController.JoinFuture(f.Future)
}

func (sc *ExtensionStreamController) Stream() *ExtensionStream {
	return &ExtensionStream{sc.StreamController.Stream()}
}

type ExtensionStream struct {
	*eventual2go.Stream
}

type ExtensionSubscriber func(Extension)

func (l ExtensionSubscriber) toSubscriber() eventual2go.Subscriber {
	return func(d eventual2go.Data) { l(d.(Extension)) }
}

func (s *ExtensionStream) Listen(ss ExtensionSubscriber) *eventual2go.Completer {
	return s.Stream.Listen(ss.toSubscriber())
}

func (s *ExtensionStream) ListenNonBlocking(ss ExtensionSubscriber) *eventual2go.Completer {
	return s.Stream.ListenNonBlocking(ss.toSubscriber())
}

type ExtensionFilter func(Extension) bool

func (f ExtensionFilter) toFilter() eventual2go.Filter {
	return func(d eventual2go.Data) bool { return f(d.(Extension)) }
}

func toExtensionFilterArray(f ...ExtensionFilter) (filter []eventual2go.Filter){

	filter = make([]eventual2go.Filter, len(f))
	for i, el := range f {
		filter[i] = el.toFilter()
	}
	return
}

func (s *ExtensionStream) Where(f ...ExtensionFilter) *ExtensionStream {
	return &ExtensionStream{s.Stream.Where(toExtensionFilterArray(f...)...)}
}

func (s *ExtensionStream) WhereNot(f ...ExtensionFilter) *ExtensionStream {
	return &ExtensionStream{s.Stream.WhereNot(toExtensionFilterArray(f...)...)}
}

func (s *ExtensionStream) TransformWhere(t eventual2go.Transformer, f ...ExtensionFilter) *eventual2go.Stream {
	return s.Stream.TransformWhere(t, toExtensionFilterArray(f...)...)
}

func (s *ExtensionStream) Split(f ExtensionFilter) (*ExtensionStream, *ExtensionStream)  {
	return s.Where(f), s.WhereNot(f)
}

func (s *ExtensionStream) First() *ExtensionFuture {
	return &ExtensionFuture{s.Stream.First()}
}

func (s *ExtensionStream) FirstWhere(f... ExtensionFilter) *ExtensionFuture {
	return &ExtensionFuture{s.Stream.FirstWhere(toExtensionFilterArray(f...)...)}
}

func (s *ExtensionStream) FirstWhereNot(f ...ExtensionFilter) *ExtensionFuture {
	return &ExtensionFuture{s.Stream.FirstWhereNot(toExtensionFilterArray(f...)...)}
}

func (s *ExtensionStream) AsChan() (c chan Extension, stop *eventual2go.Completer) {
	c = make(chan Extension)
	stop = s.Listen(pipeToExtensionChan(c))
	stop.Future().Then(closeExtensionChan(c))
	return
}

func pipeToExtensionChan(c chan Extension) ExtensionSubscriber {
	return func(d Extension) {
		c <- d
	}
}

func closeExtensionChan(c chan Extension) eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		close(c)
		return nil
	}
}

type ExtensionCollector struct {
	*eventual2go.Collector
}

func NewExtensionCollector() *ExtensionCollector {
	return &ExtensionCollector{eventual2go.NewCollector()}
}

func (c *ExtensionCollector) Add(d Extension) {
	c.Collector.Add(d)
}

func (c *ExtensionCollector) AddFuture(f *ExtensionFuture) {
	c.Collector.Add(f.Future)
}

func (c *ExtensionCollector) AddStream(s *ExtensionStream) {
	c.Collector.AddStream(s.Stream)
}

func (c *ExtensionCollector) Get() Extension {
	return c.Collector.Get().(Extension)
}

func (c *ExtensionCollector) Preview() Extension {
	return c.Collector.Preview().(Extension)
}

type ExtensionObservable struct {
	*eventual2go.Observable
}

func NewExtensionObservable (value Extension) (o *ExtensionObservable) {
	return &ExtensionObservable{eventual2go.NewObservable(value)}
}

func (o *ExtensionObservable) Value() Extension {
	return o.Observable.Value().(Extension)
}

func (o *ExtensionObservable) Change(value Extension) {
	o.Observable.Change(value)
}

func (o *ExtensionObservable) OnChange(s ExtensionSubscriber) (cancel *eventual2go.Completer) {
	return o.Observable.OnChange(s.toSubscriber())
}

func (o *ExtensionObservable) Stream() (*ExtensionStream) {
	return &ExtensionStream{o.Observable.Stream()}
}


func (o *ExtensionObservable) AsChan() (c chan Extension, cancel *eventual2go.Completer) {
	return o.Stream().AsChan()
}

func (o *ExtensionObservable) NextChange() (f *ExtensionFuture) {
	return o.Stream().First()
}
